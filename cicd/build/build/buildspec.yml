version: 0.2

env:
  variables:
    GOROOT:
    GOPATH:
    GOPROXY: direct
    GO111MODULE: "on"
    git-credential-helper: yes
    GOVERSION: go1.24.3
    VERSION_LINT: v2.1.6
    VERSION_MOCKERY: v3.3.2
    VERSION_GOREL: v2.9.0
    GOREL_ARGS: --verbose
  exported-variables:
    - AppVersion
    - AppTag
    - AppCommit
    - IsRelease
phases:
  install:
    commands:
      # Update the repos
      #- apt-get -qq --yes update && apt-get -qq --yes upgrade
      - BUILD_DIR=$PWD
      - cd /root/.goenv/plugins/go-build/../.. && git pull && cd -
      - cd /root/.goenv && git fetch --all && git pull
      - cd $BUILD_DIR
      - goenv install ${GOVERSION#go}
      - goenv global ${GOVERSION#go}
      # Install tools
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b "$(goenv prefix)/bin/" v2.1.6
      - wget -qO- https://github.com/goreleaser/goreleaser/releases/download/${VERSION_GOREL}/goreleaser_Linux_x86_64.tar.gz | gunzip | tar xvf - -C "$(goenv prefix)/bin/"
      - wget -qO- https://github.com/vektra/mockery/releases/download/${VERSION_MOCKERY}/mockery_${VERSION_MOCKERY#v}_Linux_x86_64.tar.gz | gunzip | tar xvf - -C "$(goenv prefix)/bin/"
      - goenv rehash
      - golangci-lint --version
      - mockery version

  pre_build:
    commands:
      # Print all environment variables (handy for AWS CodeBuild logs)
      # - codepipeline_name=${CODEBUILD_INITIATOR#codepipeline/}
      # - echo "CodePipeline name is $codepipeline_name"
      # - codepipeline_execution=$(aws codepipeline list-action-executions --pipeline-name $codepipeline_name)
      # - echo $codepipeline_execution
      # - commit_message=$(echo $codepipeline_execution | jq -r --arg commitId "$CODEBUILD_RESOLVED_SOURCE_VERSION" '.actionExecutionDetails[] | select(.output.outputVariables.CommitId == $commitId) | .output.outputVariables.CommitMessage')
      # - echo "Commit Message is $commit_message"

      - env
      - go version
      - '[ "$(go version | awk ''{print $3}'')" = "${GOVERSION}" ] || (echo "Wrong go version" && exit 1)'
      - export AppTag=`git describe --tags --abbrev=0`
      - export AppCommit=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - export GitReleaseCommit=`git rev-list -n 1 tags/${AppTag}`
      - |
        if expr "${GitReleaseCommit}" : "${CODEBUILD_RESOLVED_SOURCE_VERSION}" >/dev/null; then
          export IsRelease=true
          echo "Build is for release of ${AppTag}"
        else
          export IsRelease=false
          export GOREL_ARGS="--snapshot ${GOREL_ARGS}"
          echo "Build is for snapshot"
        fi
      #- export GORELEASER_CURRENT_TAG=v1.2.3
      #- export GORELEASER_PREVIOUS_TAG=v1.1.0
      - make config

      # Check the Go code for common problems with 'go vet'
      - make vet

  build:
    commands:
      # Run all tests included with our application
      - make test

      # Make only the linux binaries, snapshot if not in tag
      - make GOREL_ARGS="${GOREL_ARGS} --id ssosync" build

  post_build:
    commands:
      # Check we've packaged something useful
      - ver=$(./dist/ssosync_linux_amd64_v1/ssosync --version)
      - export AppVersion=${ver%%,*}
      - echo AppVersion=$AppVersion built
cache:
  paths:
    - /root/.cache/go-build/**/*
    - "/go/pkg/**/*"
  key: $GOVERSION-$(codebuild-hash-files 'go.sum')
artifacts:
  files:
    - dist/**/*
