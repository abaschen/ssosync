// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/aws/aws-sdk-go-v2/service/identitystore"
	"github.com/awslabs/ssosync/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIdentityStorePaginators creates a new instance of MockIdentityStorePaginators. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentityStorePaginators(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentityStorePaginators {
	mock := &MockIdentityStorePaginators{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdentityStorePaginators is an autogenerated mock type for the IdentityStorePaginators type
type MockIdentityStorePaginators struct {
	mock.Mock
}

type MockIdentityStorePaginators_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentityStorePaginators) EXPECT() *MockIdentityStorePaginators_Expecter {
	return &MockIdentityStorePaginators_Expecter{mock: &_m.Mock}
}

// NewListGroupMembershipsPaginator provides a mock function for the type MockIdentityStorePaginators
func (_mock *MockIdentityStorePaginators) NewListGroupMembershipsPaginator(client identitystore.ListGroupMembershipsAPIClient, params *identitystore.ListGroupMembershipsInput, optFns ...func(*identitystore.ListGroupMembershipsPaginatorOptions)) *interfaces.ListGroupMembershipsPaginator {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(client, params, optFns)
	} else {
		tmpRet = _mock.Called(client, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for NewListGroupMembershipsPaginator")
	}

	var r0 *interfaces.ListGroupMembershipsPaginator
	if returnFunc, ok := ret.Get(0).(func(identitystore.ListGroupMembershipsAPIClient, *identitystore.ListGroupMembershipsInput, ...func(*identitystore.ListGroupMembershipsPaginatorOptions)) *interfaces.ListGroupMembershipsPaginator); ok {
		r0 = returnFunc(client, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ListGroupMembershipsPaginator)
		}
	}
	return r0
}

// MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewListGroupMembershipsPaginator'
type MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call struct {
	*mock.Call
}

// NewListGroupMembershipsPaginator is a helper method to define mock.On call
//   - client
//   - params
//   - optFns
func (_e *MockIdentityStorePaginators_Expecter) NewListGroupMembershipsPaginator(client interface{}, params interface{}, optFns ...interface{}) *MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call {
	return &MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call{Call: _e.mock.On("NewListGroupMembershipsPaginator",
		append([]interface{}{client, params}, optFns...)...)}
}

func (_c *MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call) Run(run func(client identitystore.ListGroupMembershipsAPIClient, params *identitystore.ListGroupMembershipsInput, optFns ...func(*identitystore.ListGroupMembershipsPaginatorOptions))) *MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.ListGroupMembershipsPaginatorOptions))
		run(args[0].(identitystore.ListGroupMembershipsAPIClient), args[1].(*identitystore.ListGroupMembershipsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call) Return(listGroupMembershipsPaginator *interfaces.ListGroupMembershipsPaginator) *MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call {
	_c.Call.Return(listGroupMembershipsPaginator)
	return _c
}

func (_c *MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call) RunAndReturn(run func(client identitystore.ListGroupMembershipsAPIClient, params *identitystore.ListGroupMembershipsInput, optFns ...func(*identitystore.ListGroupMembershipsPaginatorOptions)) *interfaces.ListGroupMembershipsPaginator) *MockIdentityStorePaginators_NewListGroupMembershipsPaginator_Call {
	_c.Call.Return(run)
	return _c
}

// NewListGroupsPaginator provides a mock function for the type MockIdentityStorePaginators
func (_mock *MockIdentityStorePaginators) NewListGroupsPaginator(client identitystore.ListGroupsAPIClient, params *identitystore.ListGroupsInput, optFns ...func(*identitystore.ListGroupsPaginatorOptions)) *interfaces.ListGroupsPaginator {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(client, params, optFns)
	} else {
		tmpRet = _mock.Called(client, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for NewListGroupsPaginator")
	}

	var r0 *interfaces.ListGroupsPaginator
	if returnFunc, ok := ret.Get(0).(func(identitystore.ListGroupsAPIClient, *identitystore.ListGroupsInput, ...func(*identitystore.ListGroupsPaginatorOptions)) *interfaces.ListGroupsPaginator); ok {
		r0 = returnFunc(client, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ListGroupsPaginator)
		}
	}
	return r0
}

// MockIdentityStorePaginators_NewListGroupsPaginator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewListGroupsPaginator'
type MockIdentityStorePaginators_NewListGroupsPaginator_Call struct {
	*mock.Call
}

// NewListGroupsPaginator is a helper method to define mock.On call
//   - client
//   - params
//   - optFns
func (_e *MockIdentityStorePaginators_Expecter) NewListGroupsPaginator(client interface{}, params interface{}, optFns ...interface{}) *MockIdentityStorePaginators_NewListGroupsPaginator_Call {
	return &MockIdentityStorePaginators_NewListGroupsPaginator_Call{Call: _e.mock.On("NewListGroupsPaginator",
		append([]interface{}{client, params}, optFns...)...)}
}

func (_c *MockIdentityStorePaginators_NewListGroupsPaginator_Call) Run(run func(client identitystore.ListGroupsAPIClient, params *identitystore.ListGroupsInput, optFns ...func(*identitystore.ListGroupsPaginatorOptions))) *MockIdentityStorePaginators_NewListGroupsPaginator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.ListGroupsPaginatorOptions))
		run(args[0].(identitystore.ListGroupsAPIClient), args[1].(*identitystore.ListGroupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStorePaginators_NewListGroupsPaginator_Call) Return(listGroupsPaginator *interfaces.ListGroupsPaginator) *MockIdentityStorePaginators_NewListGroupsPaginator_Call {
	_c.Call.Return(listGroupsPaginator)
	return _c
}

func (_c *MockIdentityStorePaginators_NewListGroupsPaginator_Call) RunAndReturn(run func(client identitystore.ListGroupsAPIClient, params *identitystore.ListGroupsInput, optFns ...func(*identitystore.ListGroupsPaginatorOptions)) *interfaces.ListGroupsPaginator) *MockIdentityStorePaginators_NewListGroupsPaginator_Call {
	_c.Call.Return(run)
	return _c
}

// NewListUsersPaginator provides a mock function for the type MockIdentityStorePaginators
func (_mock *MockIdentityStorePaginators) NewListUsersPaginator(client identitystore.ListUsersAPIClient, params *identitystore.ListUsersInput, optFns ...func(*identitystore.ListUsersPaginatorOptions)) *interfaces.ListUsersPaginator {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(client, params, optFns)
	} else {
		tmpRet = _mock.Called(client, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for NewListUsersPaginator")
	}

	var r0 *interfaces.ListUsersPaginator
	if returnFunc, ok := ret.Get(0).(func(identitystore.ListUsersAPIClient, *identitystore.ListUsersInput, ...func(*identitystore.ListUsersPaginatorOptions)) *interfaces.ListUsersPaginator); ok {
		r0 = returnFunc(client, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ListUsersPaginator)
		}
	}
	return r0
}

// MockIdentityStorePaginators_NewListUsersPaginator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewListUsersPaginator'
type MockIdentityStorePaginators_NewListUsersPaginator_Call struct {
	*mock.Call
}

// NewListUsersPaginator is a helper method to define mock.On call
//   - client
//   - params
//   - optFns
func (_e *MockIdentityStorePaginators_Expecter) NewListUsersPaginator(client interface{}, params interface{}, optFns ...interface{}) *MockIdentityStorePaginators_NewListUsersPaginator_Call {
	return &MockIdentityStorePaginators_NewListUsersPaginator_Call{Call: _e.mock.On("NewListUsersPaginator",
		append([]interface{}{client, params}, optFns...)...)}
}

func (_c *MockIdentityStorePaginators_NewListUsersPaginator_Call) Run(run func(client identitystore.ListUsersAPIClient, params *identitystore.ListUsersInput, optFns ...func(*identitystore.ListUsersPaginatorOptions))) *MockIdentityStorePaginators_NewListUsersPaginator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.ListUsersPaginatorOptions))
		run(args[0].(identitystore.ListUsersAPIClient), args[1].(*identitystore.ListUsersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStorePaginators_NewListUsersPaginator_Call) Return(listUsersPaginator *interfaces.ListUsersPaginator) *MockIdentityStorePaginators_NewListUsersPaginator_Call {
	_c.Call.Return(listUsersPaginator)
	return _c
}

func (_c *MockIdentityStorePaginators_NewListUsersPaginator_Call) RunAndReturn(run func(client identitystore.ListUsersAPIClient, params *identitystore.ListUsersInput, optFns ...func(*identitystore.ListUsersPaginatorOptions)) *interfaces.ListUsersPaginator) *MockIdentityStorePaginators_NewListUsersPaginator_Call {
	_c.Call.Return(run)
	return _c
}
