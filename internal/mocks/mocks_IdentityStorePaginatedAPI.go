// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/identitystore/types"
	"github.com/awslabs/ssosync/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIdentityStorePaginatedAPI creates a new instance of MockIdentityStorePaginatedAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentityStorePaginatedAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentityStorePaginatedAPI {
	mock := &MockIdentityStorePaginatedAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdentityStorePaginatedAPI is an autogenerated mock type for the IdentityStorePaginatedAPI type
type MockIdentityStorePaginatedAPI struct {
	mock.Mock
}

type MockIdentityStorePaginatedAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentityStorePaginatedAPI) EXPECT() *MockIdentityStorePaginatedAPI_Expecter {
	return &MockIdentityStorePaginatedAPI_Expecter{mock: &_m.Mock}
}

// ListGroupMembershipsPager provides a mock function for the type MockIdentityStorePaginatedAPI
func (_mock *MockIdentityStorePaginatedAPI) ListGroupMembershipsPager(ctx context.Context, paginator interfaces.ListGroupMembershipsPaginator) ([]string, error) {
	ret := _mock.Called(ctx, paginator)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembershipsPager")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interfaces.ListGroupMembershipsPaginator) ([]string, error)); ok {
		return returnFunc(ctx, paginator)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interfaces.ListGroupMembershipsPaginator) []string); ok {
		r0 = returnFunc(ctx, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interfaces.ListGroupMembershipsPaginator) error); ok {
		r1 = returnFunc(ctx, paginator)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupMembershipsPager'
type MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call struct {
	*mock.Call
}

// ListGroupMembershipsPager is a helper method to define mock.On call
//   - ctx
//   - paginator
func (_e *MockIdentityStorePaginatedAPI_Expecter) ListGroupMembershipsPager(ctx interface{}, paginator interface{}) *MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call {
	return &MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call{Call: _e.mock.On("ListGroupMembershipsPager", ctx, paginator)}
}

func (_c *MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call) Run(run func(ctx context.Context, paginator interfaces.ListGroupMembershipsPaginator)) *MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.ListGroupMembershipsPaginator))
	})
	return _c
}

func (_c *MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call) Return(strings []string, err error) *MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call) RunAndReturn(run func(ctx context.Context, paginator interfaces.ListGroupMembershipsPaginator) ([]string, error)) *MockIdentityStorePaginatedAPI_ListGroupMembershipsPager_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsPager provides a mock function for the type MockIdentityStorePaginatedAPI
func (_mock *MockIdentityStorePaginatedAPI) ListGroupsPager(ctx context.Context, paginator interfaces.ListGroupsPaginator, lambdaConvert func(types.Group) *interfaces.Group) ([]*interfaces.Group, error) {
	ret := _mock.Called(ctx, paginator, lambdaConvert)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsPager")
	}

	var r0 []*interfaces.Group
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interfaces.ListGroupsPaginator, func(types.Group) *interfaces.Group) ([]*interfaces.Group, error)); ok {
		return returnFunc(ctx, paginator, lambdaConvert)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interfaces.ListGroupsPaginator, func(types.Group) *interfaces.Group) []*interfaces.Group); ok {
		r0 = returnFunc(ctx, paginator, lambdaConvert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interfaces.ListGroupsPaginator, func(types.Group) *interfaces.Group) error); ok {
		r1 = returnFunc(ctx, paginator, lambdaConvert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStorePaginatedAPI_ListGroupsPager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsPager'
type MockIdentityStorePaginatedAPI_ListGroupsPager_Call struct {
	*mock.Call
}

// ListGroupsPager is a helper method to define mock.On call
//   - ctx
//   - paginator
//   - lambdaConvert
func (_e *MockIdentityStorePaginatedAPI_Expecter) ListGroupsPager(ctx interface{}, paginator interface{}, lambdaConvert interface{}) *MockIdentityStorePaginatedAPI_ListGroupsPager_Call {
	return &MockIdentityStorePaginatedAPI_ListGroupsPager_Call{Call: _e.mock.On("ListGroupsPager", ctx, paginator, lambdaConvert)}
}

func (_c *MockIdentityStorePaginatedAPI_ListGroupsPager_Call) Run(run func(ctx context.Context, paginator interfaces.ListGroupsPaginator, lambdaConvert func(types.Group) *interfaces.Group)) *MockIdentityStorePaginatedAPI_ListGroupsPager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.ListGroupsPaginator), args[2].(func(types.Group) *interfaces.Group))
	})
	return _c
}

func (_c *MockIdentityStorePaginatedAPI_ListGroupsPager_Call) Return(groups []*interfaces.Group, err error) *MockIdentityStorePaginatedAPI_ListGroupsPager_Call {
	_c.Call.Return(groups, err)
	return _c
}

func (_c *MockIdentityStorePaginatedAPI_ListGroupsPager_Call) RunAndReturn(run func(ctx context.Context, paginator interfaces.ListGroupsPaginator, lambdaConvert func(types.Group) *interfaces.Group) ([]*interfaces.Group, error)) *MockIdentityStorePaginatedAPI_ListGroupsPager_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersPager provides a mock function for the type MockIdentityStorePaginatedAPI
func (_mock *MockIdentityStorePaginatedAPI) ListUsersPager(ctx context.Context, paginator interfaces.ListUsersPaginator, lambdaConvert func(types.User) *interfaces.User) ([]*interfaces.User, error) {
	ret := _mock.Called(ctx, paginator, lambdaConvert)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersPager")
	}

	var r0 []*interfaces.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interfaces.ListUsersPaginator, func(types.User) *interfaces.User) ([]*interfaces.User, error)); ok {
		return returnFunc(ctx, paginator, lambdaConvert)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interfaces.ListUsersPaginator, func(types.User) *interfaces.User) []*interfaces.User); ok {
		r0 = returnFunc(ctx, paginator, lambdaConvert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interfaces.ListUsersPaginator, func(types.User) *interfaces.User) error); ok {
		r1 = returnFunc(ctx, paginator, lambdaConvert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStorePaginatedAPI_ListUsersPager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersPager'
type MockIdentityStorePaginatedAPI_ListUsersPager_Call struct {
	*mock.Call
}

// ListUsersPager is a helper method to define mock.On call
//   - ctx
//   - paginator
//   - lambdaConvert
func (_e *MockIdentityStorePaginatedAPI_Expecter) ListUsersPager(ctx interface{}, paginator interface{}, lambdaConvert interface{}) *MockIdentityStorePaginatedAPI_ListUsersPager_Call {
	return &MockIdentityStorePaginatedAPI_ListUsersPager_Call{Call: _e.mock.On("ListUsersPager", ctx, paginator, lambdaConvert)}
}

func (_c *MockIdentityStorePaginatedAPI_ListUsersPager_Call) Run(run func(ctx context.Context, paginator interfaces.ListUsersPaginator, lambdaConvert func(types.User) *interfaces.User)) *MockIdentityStorePaginatedAPI_ListUsersPager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.ListUsersPaginator), args[2].(func(types.User) *interfaces.User))
	})
	return _c
}

func (_c *MockIdentityStorePaginatedAPI_ListUsersPager_Call) Return(users []*interfaces.User, err error) *MockIdentityStorePaginatedAPI_ListUsersPager_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockIdentityStorePaginatedAPI_ListUsersPager_Call) RunAndReturn(run func(ctx context.Context, paginator interfaces.ListUsersPaginator, lambdaConvert func(types.User) *interfaces.User) ([]*interfaces.User, error)) *MockIdentityStorePaginatedAPI_ListUsersPager_Call {
	_c.Call.Return(run)
	return _c
}
