// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/identitystore"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIdentityStoreAPI creates a new instance of MockIdentityStoreAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIdentityStoreAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIdentityStoreAPI {
	mock := &MockIdentityStoreAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIdentityStoreAPI is an autogenerated mock type for the IdentityStoreAPI type
type MockIdentityStoreAPI struct {
	mock.Mock
}

type MockIdentityStoreAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIdentityStoreAPI) EXPECT() *MockIdentityStoreAPI_Expecter {
	return &MockIdentityStoreAPI_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) CreateGroup(ctx context.Context, params *identitystore.CreateGroupInput, optFns ...func(*identitystore.Options)) (*identitystore.CreateGroupOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *identitystore.CreateGroupOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.CreateGroupInput, ...func(*identitystore.Options)) (*identitystore.CreateGroupOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.CreateGroupInput, ...func(*identitystore.Options)) *identitystore.CreateGroupOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.CreateGroupOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.CreateGroupInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockIdentityStoreAPI_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) CreateGroup(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_CreateGroup_Call {
	return &MockIdentityStoreAPI_CreateGroup_Call{Call: _e.mock.On("CreateGroup",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_CreateGroup_Call) Run(run func(ctx context.Context, params *identitystore.CreateGroupInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.CreateGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_CreateGroup_Call) Return(createGroupOutput *identitystore.CreateGroupOutput, err error) *MockIdentityStoreAPI_CreateGroup_Call {
	_c.Call.Return(createGroupOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_CreateGroup_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.CreateGroupInput, optFns ...func(*identitystore.Options)) (*identitystore.CreateGroupOutput, error)) *MockIdentityStoreAPI_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupMembership provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) CreateGroupMembership(ctx context.Context, params *identitystore.CreateGroupMembershipInput, optFns ...func(*identitystore.Options)) (*identitystore.CreateGroupMembershipOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupMembership")
	}

	var r0 *identitystore.CreateGroupMembershipOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.CreateGroupMembershipInput, ...func(*identitystore.Options)) (*identitystore.CreateGroupMembershipOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.CreateGroupMembershipInput, ...func(*identitystore.Options)) *identitystore.CreateGroupMembershipOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.CreateGroupMembershipOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.CreateGroupMembershipInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_CreateGroupMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupMembership'
type MockIdentityStoreAPI_CreateGroupMembership_Call struct {
	*mock.Call
}

// CreateGroupMembership is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) CreateGroupMembership(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_CreateGroupMembership_Call {
	return &MockIdentityStoreAPI_CreateGroupMembership_Call{Call: _e.mock.On("CreateGroupMembership",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_CreateGroupMembership_Call) Run(run func(ctx context.Context, params *identitystore.CreateGroupMembershipInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_CreateGroupMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.CreateGroupMembershipInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_CreateGroupMembership_Call) Return(createGroupMembershipOutput *identitystore.CreateGroupMembershipOutput, err error) *MockIdentityStoreAPI_CreateGroupMembership_Call {
	_c.Call.Return(createGroupMembershipOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_CreateGroupMembership_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.CreateGroupMembershipInput, optFns ...func(*identitystore.Options)) (*identitystore.CreateGroupMembershipOutput, error)) *MockIdentityStoreAPI_CreateGroupMembership_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) CreateUser(ctx context.Context, params *identitystore.CreateUserInput, optFns ...func(*identitystore.Options)) (*identitystore.CreateUserOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *identitystore.CreateUserOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.CreateUserInput, ...func(*identitystore.Options)) (*identitystore.CreateUserOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.CreateUserInput, ...func(*identitystore.Options)) *identitystore.CreateUserOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.CreateUserOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.CreateUserInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIdentityStoreAPI_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) CreateUser(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_CreateUser_Call {
	return &MockIdentityStoreAPI_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_CreateUser_Call) Run(run func(ctx context.Context, params *identitystore.CreateUserInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.CreateUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_CreateUser_Call) Return(createUserOutput *identitystore.CreateUserOutput, err error) *MockIdentityStoreAPI_CreateUser_Call {
	_c.Call.Return(createUserOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_CreateUser_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.CreateUserInput, optFns ...func(*identitystore.Options)) (*identitystore.CreateUserOutput, error)) *MockIdentityStoreAPI_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) DeleteGroup(ctx context.Context, params *identitystore.DeleteGroupInput, optFns ...func(*identitystore.Options)) (*identitystore.DeleteGroupOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *identitystore.DeleteGroupOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.DeleteGroupInput, ...func(*identitystore.Options)) (*identitystore.DeleteGroupOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.DeleteGroupInput, ...func(*identitystore.Options)) *identitystore.DeleteGroupOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.DeleteGroupOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.DeleteGroupInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockIdentityStoreAPI_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) DeleteGroup(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_DeleteGroup_Call {
	return &MockIdentityStoreAPI_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_DeleteGroup_Call) Run(run func(ctx context.Context, params *identitystore.DeleteGroupInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.DeleteGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_DeleteGroup_Call) Return(deleteGroupOutput *identitystore.DeleteGroupOutput, err error) *MockIdentityStoreAPI_DeleteGroup_Call {
	_c.Call.Return(deleteGroupOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_DeleteGroup_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.DeleteGroupInput, optFns ...func(*identitystore.Options)) (*identitystore.DeleteGroupOutput, error)) *MockIdentityStoreAPI_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupMembership provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) DeleteGroupMembership(ctx context.Context, params *identitystore.DeleteGroupMembershipInput, optFns ...func(*identitystore.Options)) (*identitystore.DeleteGroupMembershipOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupMembership")
	}

	var r0 *identitystore.DeleteGroupMembershipOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.DeleteGroupMembershipInput, ...func(*identitystore.Options)) (*identitystore.DeleteGroupMembershipOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.DeleteGroupMembershipInput, ...func(*identitystore.Options)) *identitystore.DeleteGroupMembershipOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.DeleteGroupMembershipOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.DeleteGroupMembershipInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_DeleteGroupMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupMembership'
type MockIdentityStoreAPI_DeleteGroupMembership_Call struct {
	*mock.Call
}

// DeleteGroupMembership is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) DeleteGroupMembership(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_DeleteGroupMembership_Call {
	return &MockIdentityStoreAPI_DeleteGroupMembership_Call{Call: _e.mock.On("DeleteGroupMembership",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_DeleteGroupMembership_Call) Run(run func(ctx context.Context, params *identitystore.DeleteGroupMembershipInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_DeleteGroupMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.DeleteGroupMembershipInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_DeleteGroupMembership_Call) Return(deleteGroupMembershipOutput *identitystore.DeleteGroupMembershipOutput, err error) *MockIdentityStoreAPI_DeleteGroupMembership_Call {
	_c.Call.Return(deleteGroupMembershipOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_DeleteGroupMembership_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.DeleteGroupMembershipInput, optFns ...func(*identitystore.Options)) (*identitystore.DeleteGroupMembershipOutput, error)) *MockIdentityStoreAPI_DeleteGroupMembership_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) DeleteUser(ctx context.Context, params *identitystore.DeleteUserInput, optFns ...func(*identitystore.Options)) (*identitystore.DeleteUserOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *identitystore.DeleteUserOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.DeleteUserInput, ...func(*identitystore.Options)) (*identitystore.DeleteUserOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.DeleteUserInput, ...func(*identitystore.Options)) *identitystore.DeleteUserOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.DeleteUserOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.DeleteUserInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockIdentityStoreAPI_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) DeleteUser(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_DeleteUser_Call {
	return &MockIdentityStoreAPI_DeleteUser_Call{Call: _e.mock.On("DeleteUser",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_DeleteUser_Call) Run(run func(ctx context.Context, params *identitystore.DeleteUserInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.DeleteUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_DeleteUser_Call) Return(deleteUserOutput *identitystore.DeleteUserOutput, err error) *MockIdentityStoreAPI_DeleteUser_Call {
	_c.Call.Return(deleteUserOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.DeleteUserInput, optFns ...func(*identitystore.Options)) (*identitystore.DeleteUserOutput, error)) *MockIdentityStoreAPI_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMembershipId provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) GetGroupMembershipId(ctx context.Context, params *identitystore.GetGroupMembershipIdInput, optFns ...func(*identitystore.Options)) (*identitystore.GetGroupMembershipIdOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMembershipId")
	}

	var r0 *identitystore.GetGroupMembershipIdOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.GetGroupMembershipIdInput, ...func(*identitystore.Options)) (*identitystore.GetGroupMembershipIdOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.GetGroupMembershipIdInput, ...func(*identitystore.Options)) *identitystore.GetGroupMembershipIdOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.GetGroupMembershipIdOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.GetGroupMembershipIdInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_GetGroupMembershipId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMembershipId'
type MockIdentityStoreAPI_GetGroupMembershipId_Call struct {
	*mock.Call
}

// GetGroupMembershipId is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) GetGroupMembershipId(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_GetGroupMembershipId_Call {
	return &MockIdentityStoreAPI_GetGroupMembershipId_Call{Call: _e.mock.On("GetGroupMembershipId",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_GetGroupMembershipId_Call) Run(run func(ctx context.Context, params *identitystore.GetGroupMembershipIdInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_GetGroupMembershipId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.GetGroupMembershipIdInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_GetGroupMembershipId_Call) Return(getGroupMembershipIdOutput *identitystore.GetGroupMembershipIdOutput, err error) *MockIdentityStoreAPI_GetGroupMembershipId_Call {
	_c.Call.Return(getGroupMembershipIdOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_GetGroupMembershipId_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.GetGroupMembershipIdInput, optFns ...func(*identitystore.Options)) (*identitystore.GetGroupMembershipIdOutput, error)) *MockIdentityStoreAPI_GetGroupMembershipId_Call {
	_c.Call.Return(run)
	return _c
}

// IsMemberInGroups provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) IsMemberInGroups(ctx context.Context, params *identitystore.IsMemberInGroupsInput, optFns ...func(*identitystore.Options)) (*identitystore.IsMemberInGroupsOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for IsMemberInGroups")
	}

	var r0 *identitystore.IsMemberInGroupsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.IsMemberInGroupsInput, ...func(*identitystore.Options)) (*identitystore.IsMemberInGroupsOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.IsMemberInGroupsInput, ...func(*identitystore.Options)) *identitystore.IsMemberInGroupsOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.IsMemberInGroupsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.IsMemberInGroupsInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_IsMemberInGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMemberInGroups'
type MockIdentityStoreAPI_IsMemberInGroups_Call struct {
	*mock.Call
}

// IsMemberInGroups is a helper method to define mock.On call
//   - ctx
//   - params
//   - optFns
func (_e *MockIdentityStoreAPI_Expecter) IsMemberInGroups(ctx interface{}, params interface{}, optFns ...interface{}) *MockIdentityStoreAPI_IsMemberInGroups_Call {
	return &MockIdentityStoreAPI_IsMemberInGroups_Call{Call: _e.mock.On("IsMemberInGroups",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockIdentityStoreAPI_IsMemberInGroups_Call) Run(run func(ctx context.Context, params *identitystore.IsMemberInGroupsInput, optFns ...func(*identitystore.Options))) *MockIdentityStoreAPI_IsMemberInGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.IsMemberInGroupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_IsMemberInGroups_Call) Return(isMemberInGroupsOutput *identitystore.IsMemberInGroupsOutput, err error) *MockIdentityStoreAPI_IsMemberInGroups_Call {
	_c.Call.Return(isMemberInGroupsOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_IsMemberInGroups_Call) RunAndReturn(run func(ctx context.Context, params *identitystore.IsMemberInGroupsInput, optFns ...func(*identitystore.Options)) (*identitystore.IsMemberInGroupsOutput, error)) *MockIdentityStoreAPI_IsMemberInGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupMemberships provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) ListGroupMemberships(context1 context.Context, listGroupMembershipsInput *identitystore.ListGroupMembershipsInput, fns ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listGroupMembershipsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listGroupMembershipsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMemberships")
	}

	var r0 *identitystore.ListGroupMembershipsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.ListGroupMembershipsInput, ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsOutput, error)); ok {
		return returnFunc(context1, listGroupMembershipsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.ListGroupMembershipsInput, ...func(*identitystore.Options)) *identitystore.ListGroupMembershipsOutput); ok {
		r0 = returnFunc(context1, listGroupMembershipsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.ListGroupMembershipsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.ListGroupMembershipsInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(context1, listGroupMembershipsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_ListGroupMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupMemberships'
type MockIdentityStoreAPI_ListGroupMemberships_Call struct {
	*mock.Call
}

// ListGroupMemberships is a helper method to define mock.On call
//   - context1
//   - listGroupMembershipsInput
//   - fns
func (_e *MockIdentityStoreAPI_Expecter) ListGroupMemberships(context1 interface{}, listGroupMembershipsInput interface{}, fns ...interface{}) *MockIdentityStoreAPI_ListGroupMemberships_Call {
	return &MockIdentityStoreAPI_ListGroupMemberships_Call{Call: _e.mock.On("ListGroupMemberships",
		append([]interface{}{context1, listGroupMembershipsInput}, fns...)...)}
}

func (_c *MockIdentityStoreAPI_ListGroupMemberships_Call) Run(run func(context1 context.Context, listGroupMembershipsInput *identitystore.ListGroupMembershipsInput, fns ...func(*identitystore.Options))) *MockIdentityStoreAPI_ListGroupMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.ListGroupMembershipsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_ListGroupMemberships_Call) Return(listGroupMembershipsOutput *identitystore.ListGroupMembershipsOutput, err error) *MockIdentityStoreAPI_ListGroupMemberships_Call {
	_c.Call.Return(listGroupMembershipsOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_ListGroupMemberships_Call) RunAndReturn(run func(context1 context.Context, listGroupMembershipsInput *identitystore.ListGroupMembershipsInput, fns ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsOutput, error)) *MockIdentityStoreAPI_ListGroupMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) ListGroups(context1 context.Context, listGroupsInput *identitystore.ListGroupsInput, fns ...func(*identitystore.Options)) (*identitystore.ListGroupsOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listGroupsInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listGroupsInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *identitystore.ListGroupsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.ListGroupsInput, ...func(*identitystore.Options)) (*identitystore.ListGroupsOutput, error)); ok {
		return returnFunc(context1, listGroupsInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.ListGroupsInput, ...func(*identitystore.Options)) *identitystore.ListGroupsOutput); ok {
		r0 = returnFunc(context1, listGroupsInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.ListGroupsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.ListGroupsInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(context1, listGroupsInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type MockIdentityStoreAPI_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - context1
//   - listGroupsInput
//   - fns
func (_e *MockIdentityStoreAPI_Expecter) ListGroups(context1 interface{}, listGroupsInput interface{}, fns ...interface{}) *MockIdentityStoreAPI_ListGroups_Call {
	return &MockIdentityStoreAPI_ListGroups_Call{Call: _e.mock.On("ListGroups",
		append([]interface{}{context1, listGroupsInput}, fns...)...)}
}

func (_c *MockIdentityStoreAPI_ListGroups_Call) Run(run func(context1 context.Context, listGroupsInput *identitystore.ListGroupsInput, fns ...func(*identitystore.Options))) *MockIdentityStoreAPI_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.ListGroupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_ListGroups_Call) Return(listGroupsOutput *identitystore.ListGroupsOutput, err error) *MockIdentityStoreAPI_ListGroups_Call {
	_c.Call.Return(listGroupsOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_ListGroups_Call) RunAndReturn(run func(context1 context.Context, listGroupsInput *identitystore.ListGroupsInput, fns ...func(*identitystore.Options)) (*identitystore.ListGroupsOutput, error)) *MockIdentityStoreAPI_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockIdentityStoreAPI
func (_mock *MockIdentityStoreAPI) ListUsers(context1 context.Context, listUsersInput *identitystore.ListUsersInput, fns ...func(*identitystore.Options)) (*identitystore.ListUsersOutput, error) {
	var tmpRet mock.Arguments
	if len(fns) > 0 {
		tmpRet = _mock.Called(context1, listUsersInput, fns)
	} else {
		tmpRet = _mock.Called(context1, listUsersInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *identitystore.ListUsersOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.ListUsersInput, ...func(*identitystore.Options)) (*identitystore.ListUsersOutput, error)); ok {
		return returnFunc(context1, listUsersInput, fns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *identitystore.ListUsersInput, ...func(*identitystore.Options)) *identitystore.ListUsersOutput); ok {
		r0 = returnFunc(context1, listUsersInput, fns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.ListUsersOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *identitystore.ListUsersInput, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(context1, listUsersInput, fns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIdentityStoreAPI_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockIdentityStoreAPI_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - context1
//   - listUsersInput
//   - fns
func (_e *MockIdentityStoreAPI_Expecter) ListUsers(context1 interface{}, listUsersInput interface{}, fns ...interface{}) *MockIdentityStoreAPI_ListUsers_Call {
	return &MockIdentityStoreAPI_ListUsers_Call{Call: _e.mock.On("ListUsers",
		append([]interface{}{context1, listUsersInput}, fns...)...)}
}

func (_c *MockIdentityStoreAPI_ListUsers_Call) Run(run func(context1 context.Context, listUsersInput *identitystore.ListUsersInput, fns ...func(*identitystore.Options))) *MockIdentityStoreAPI_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]func(*identitystore.Options))
		run(args[0].(context.Context), args[1].(*identitystore.ListUsersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIdentityStoreAPI_ListUsers_Call) Return(listUsersOutput *identitystore.ListUsersOutput, err error) *MockIdentityStoreAPI_ListUsers_Call {
	_c.Call.Return(listUsersOutput, err)
	return _c
}

func (_c *MockIdentityStoreAPI_ListUsers_Call) RunAndReturn(run func(context1 context.Context, listUsersInput *identitystore.ListUsersInput, fns ...func(*identitystore.Options)) (*identitystore.ListUsersOutput, error)) *MockIdentityStoreAPI_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}
