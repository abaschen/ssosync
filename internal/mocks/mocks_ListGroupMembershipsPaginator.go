// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/identitystore"
	mock "github.com/stretchr/testify/mock"
)

// NewMockListGroupMembershipsPaginator creates a new instance of MockListGroupMembershipsPaginator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListGroupMembershipsPaginator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListGroupMembershipsPaginator {
	mock := &MockListGroupMembershipsPaginator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockListGroupMembershipsPaginator is an autogenerated mock type for the ListGroupMembershipsPaginator type
type MockListGroupMembershipsPaginator struct {
	mock.Mock
}

type MockListGroupMembershipsPaginator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListGroupMembershipsPaginator) EXPECT() *MockListGroupMembershipsPaginator_Expecter {
	return &MockListGroupMembershipsPaginator_Expecter{mock: &_m.Mock}
}

// HasMorePages provides a mock function for the type MockListGroupMembershipsPaginator
func (_mock *MockListGroupMembershipsPaginator) HasMorePages() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasMorePages")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockListGroupMembershipsPaginator_HasMorePages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasMorePages'
type MockListGroupMembershipsPaginator_HasMorePages_Call struct {
	*mock.Call
}

// HasMorePages is a helper method to define mock.On call
func (_e *MockListGroupMembershipsPaginator_Expecter) HasMorePages() *MockListGroupMembershipsPaginator_HasMorePages_Call {
	return &MockListGroupMembershipsPaginator_HasMorePages_Call{Call: _e.mock.On("HasMorePages")}
}

func (_c *MockListGroupMembershipsPaginator_HasMorePages_Call) Run(run func()) *MockListGroupMembershipsPaginator_HasMorePages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockListGroupMembershipsPaginator_HasMorePages_Call) Return(b bool) *MockListGroupMembershipsPaginator_HasMorePages_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockListGroupMembershipsPaginator_HasMorePages_Call) RunAndReturn(run func() bool) *MockListGroupMembershipsPaginator_HasMorePages_Call {
	_c.Call.Return(run)
	return _c
}

// NextPage provides a mock function for the type MockListGroupMembershipsPaginator
func (_mock *MockListGroupMembershipsPaginator) NextPage(ctx context.Context, optFns ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, optFns)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for NextPage")
	}

	var r0 *identitystore.ListGroupMembershipsOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsOutput, error)); ok {
		return returnFunc(ctx, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...func(*identitystore.Options)) *identitystore.ListGroupMembershipsOutput); ok {
		r0 = returnFunc(ctx, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identitystore.ListGroupMembershipsOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...func(*identitystore.Options)) error); ok {
		r1 = returnFunc(ctx, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockListGroupMembershipsPaginator_NextPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextPage'
type MockListGroupMembershipsPaginator_NextPage_Call struct {
	*mock.Call
}

// NextPage is a helper method to define mock.On call
//   - ctx
//   - optFns
func (_e *MockListGroupMembershipsPaginator_Expecter) NextPage(ctx interface{}, optFns ...interface{}) *MockListGroupMembershipsPaginator_NextPage_Call {
	return &MockListGroupMembershipsPaginator_NextPage_Call{Call: _e.mock.On("NextPage",
		append([]interface{}{ctx}, optFns...)...)}
}

func (_c *MockListGroupMembershipsPaginator_NextPage_Call) Run(run func(ctx context.Context, optFns ...func(*identitystore.Options))) *MockListGroupMembershipsPaginator_NextPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]func(*identitystore.Options))
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockListGroupMembershipsPaginator_NextPage_Call) Return(listGroupMembershipsOutput *identitystore.ListGroupMembershipsOutput, err error) *MockListGroupMembershipsPaginator_NextPage_Call {
	_c.Call.Return(listGroupMembershipsOutput, err)
	return _c
}

func (_c *MockListGroupMembershipsPaginator_NextPage_Call) RunAndReturn(run func(ctx context.Context, optFns ...func(*identitystore.Options)) (*identitystore.ListGroupMembershipsOutput, error)) *MockListGroupMembershipsPaginator_NextPage_Call {
	_c.Call.Return(run)
	return _c
}
